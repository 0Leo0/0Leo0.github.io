<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[OpenCV_python3_08]]></title>
    <url>%2F%2F2018%2FOpenCV_python3_08.html</url>
    <content type="text"><![CDATA[Practical Python and OpenCV,3rd Edition 08 拆分和合并通道(splitting and merging channels)彩色图像由多个通道组成：红色，绿色和蓝色成分。我们已经看到我们可以通过索引到NumPy数组来访问这些成分。但是，如果我们想将图像分割成各自的成分呢？ 我们将使用cv2.split函数。如下图所示，我们有一个 新建一个masking.py # Import the necessary packages import numpy as np import argparse import cv2 # Construct the argument parser and parse the arguments ap = argparse.ArgumentParser() ap.add_argument(&quot;-i&quot;, &quot;--image&quot;, required = True, help = &quot;Path to the image&quot;) args = vars(ap.parse_args()) # Load the image and show it image = cv2.imread(args[&quot;image&quot;]) cv2.imshow(&quot;Original&quot;, image) 上面读取并显示原始图片，接下来我们构造一个NumPy数组，填充零，与我们的图像具有相同的宽度和高度。为了绘制白色矩形，我们首先通过划分宽度和高度来计算图像的中心，使用//运算符表示整数除法。最后，我们使用cv2.rectangle函数画出白色矩形。 # Masking allows us to focus only on parts of an image that # interest us. A mask is the same size as our image, but has # only two pixel values, 0 and 255. Pixels with a value of 0 # are ignored in the orignal image, and mask pixels with a # value of 255 are allowed to be kept. For example, let&apos;s # construct a mask with a 150x150 square at the center of it # and mask our image. mask = np.zeros(image.shape[:2], dtype = &quot;uint8&quot;) (cX, cY) = (image.shape[1] // 2, image.shape[0] // 2) cv2.rectangle(mask, (cX - 75, cY - 75), (cX + 75 , cY + 75), 255, -1) cv2.imshow(&quot;Mask&quot;, mask) 我们使用cv2.bitwise_and函数应用我们的mask。前两个参数是图像本身。显然，对于图像中的所有像素，AND功能将为True。但是，此函数的重要部分是mask关键字参数。通过提供mask，cv2.bitwise_and函数仅检查mask中“on”的像素。在这种情况下，只有矩形白色区域是显示出来的。 # Apply out mask -- notice how only the center rectangular # region of the pill is shown masked = cv2.bitwise_and(image, image, mask = mask) cv2.imshow(&quot;Mask Applied to Image&quot;, masked) cv2.waitKey(0) 接下来，我们重新初始化我们的蒙版，用零填充与图像相同的尺寸。然后，我们在mask image上绘制一个白色圆圈，从图像的中心开始，半径为100像素。然后再次使用cv2.bitwise_and函数应用圆形mask。 # Now, let&apos;s make a circular mask with a radius of 100 pixels mask = np.zeros(image.shape[:2],dtype=&quot;uint8&quot;) cv2.circle(mask,(cX,cY),100,255,-1) masked = cv2.bitwise_and(image,image,mask=mask) cv2.imshow(&quot;Mask&quot;,mask) cv2.imshow(&quot;Mask Applied to Image&quot;,masked) cv2.waitKey(0) 显示效果： 用到的函数 cv2.bitwise_and cv2.ractangle cv2.circle 更多的参考：PPaO Chapter 6 – Image Processing]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>Opencv</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenCV_python3_07]]></title>
    <url>%2F%2F2018%2FOpenCV_python3_07.html</url>
    <content type="text"><![CDATA[Practical Python and OpenCV,3rd Edition 07 MASKING接下来我们看一下masking technique。 使用mask可以让我们只关注我们感兴趣的图像部分。 例如，假设我们正在建立一个识别面部的计算机视觉系统。我们有兴趣查找和描述的图像的唯一部分是包含面部的图像部分——我们根本不关心图像的其余内容。如果我们可以在图像中找到面部，我们可以构造一个mask来仅显示图像中的面部。 新建一个masking.py # Import the necessary packages import numpy as np import argparse import cv2 # Construct the argument parser and parse the arguments ap = argparse.ArgumentParser() ap.add_argument(&quot;-i&quot;, &quot;--image&quot;, required = True, help = &quot;Path to the image&quot;) args = vars(ap.parse_args()) # Load the image and show it image = cv2.imread(args[&quot;image&quot;]) cv2.imshow(&quot;Original&quot;, image) 上面读取并显示原始图片，接下来我们构造一个NumPy数组，填充零，与我们的图像具有相同的宽度和高度。为了绘制白色矩形，我们首先通过划分宽度和高度来计算图像的中心，使用//运算符表示整数除法。最后，我们使用cv2.rectangle函数画出白色矩形。 # Masking allows us to focus only on parts of an image that # interest us. A mask is the same size as our image, but has # only two pixel values, 0 and 255. Pixels with a value of 0 # are ignored in the orignal image, and mask pixels with a # value of 255 are allowed to be kept. For example, let&apos;s # construct a mask with a 150x150 square at the center of it # and mask our image. mask = np.zeros(image.shape[:2], dtype = &quot;uint8&quot;) (cX, cY) = (image.shape[1] // 2, image.shape[0] // 2) cv2.rectangle(mask, (cX - 75, cY - 75), (cX + 75 , cY + 75), 255, -1) cv2.imshow(&quot;Mask&quot;, mask) 我们使用cv2.bitwise_and函数应用我们的mask。前两个参数是图像本身。显然，对于图像中的所有像素，AND功能将为True。但是，此函数的重要部分是mask关键字参数。通过提供mask，cv2.bitwise_and函数仅检查mask中“on”的像素。在这种情况下，只有矩形白色区域是显示出来的。 # Apply out mask -- notice how only the center rectangular # region of the pill is shown masked = cv2.bitwise_and(image, image, mask = mask) cv2.imshow(&quot;Mask Applied to Image&quot;, masked) cv2.waitKey(0) 接下来，我们重新初始化我们的蒙版，用零填充与图像相同的尺寸。然后，我们在mask image上绘制一个白色圆圈，从图像的中心开始，半径为100像素。然后再次使用cv2.bitwise_and函数应用圆形mask。 # Now, let&apos;s make a circular mask with a radius of 100 pixels mask = np.zeros(image.shape[:2],dtype=&quot;uint8&quot;) cv2.circle(mask,(cX,cY),100,255,-1) masked = cv2.bitwise_and(image,image,mask=mask) cv2.imshow(&quot;Mask&quot;,mask) cv2.imshow(&quot;Mask Applied to Image&quot;,masked) cv2.waitKey(0) 显示效果： 用到的函数 cv2.bitwise_and cv2.ractangle cv2.circle 更多的参考：PPaO Chapter 6 – Image Processing]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>Opencv</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenCV_python3_06]]></title>
    <url>%2F%2F2018%2FOpenCV_python3_06.html</url>
    <content type="text"><![CDATA[Practical Python and OpenCV,3rd Edition 06 按位运算(bitwise operations)现在我们将检查四个按位运算：AND，OR，XOR和NOT。 这四个操作虽然非常基础和低级，但对图像处理至关重要。 新建一个bitwise.py import numpy as np import cv2 rectangle = np.zeros((300,300),dtype=&quot;uint8&quot;) cv2.rectangle(rectangle,(25,25),(275,275),255,-1) cv2.imshow(&quot;Rectangle&quot;,rectangle) circle = np.zeros((300,300),dtype=&quot;uint8&quot;) cv2.circle(circle,(150,150),150,255,-1) cv2.imshow(&quot;Circle&quot;,circle) cv2.waitKey(0) 解释： 我们将矩形图像初始化为0×300NumPy数组。然后在图像的中心绘制一个250×250的白色矩形(实心)。类似地，我们初始化另一个图像以包含我们的圆，再次以图像的中心为中心，半径为150像素。 显示效果： bitwiseAnd = cv2.bitwise_and(rectangle,circle) cv2.imshow(&quot;AND&quot;,bitwiseAnd) cv2.waitKey(0) bitwiseOr = cv2.bitwise_or(rectangle,circle) cv2.imshow(&quot;OR&quot;,bitwiseOr) cv2.waitKey(0) bitwiseXor = cv2.bitwise_xor(rectangle,circle) cv2.imshow(&quot;XOR&quot;,bitwiseXor) cv2.waitKey(0) bitwiseNot = cv2.bitwise_not(circle) cv2.imshow(&quot;NOT&quot;,bitwiseNot) cv2.waitKey(0) 如上所述，一个像素 is turned “on” 如果它有一个大于0的值，否则是”turned off”,如果它有一个0值。Bitwise函数在这些二进制条件下运行。 为了利用按位函数，我们假设(在大多数情况下)我们正在比较两个像素（唯一的例外是NOT函数)。我们将比较每个像素，然后构造我们的按位表示。 AND:当且仅当两个像素都大于零时，按位AND为真 OR:如果两个像素中的任何一个大于零，则按位OR为真。 XOR:异或，取异，也就是两个不一样时才为真 NOT:按位NOT反转图像中的“开”和“关”像素。 首先，我们使用cv2.bitwise_and函数对我们的矩形和圆形图像应用按位AND。如上面的列表所示，当且仅当两个像素都大于零时，按位AND才为真。 我们按位AND的输出可以如下图所示。我们可以看到正方形的边缘丢失了，因为我们的矩形不会覆盖像圆圈那样大的区域，因此两个像素都不会“打开”。 显示效果: 然后，我们使用按位OR，bitwise_or函数。 如果两个像素中的任何一个大于零，则按位OR为真。下图显示了按位OR的输出。在这种情况下，我们的正方形和矩形已合并在一起。 显示效果： 接下来是按位XOR函数，使用cv2.bitwise_xor函数。取两个图形不一样的地方为真。其余为假，就是0，黑色。 显示效果： 最后，我们使用cv2.bitwise_not函数应用NOT函数。实质上，按位NOT函数会翻转像素值。所有大于零的像素都设置为零，所有设置为零的像素都设置为255.下图为我们的白色圆圈翻转为黑色圆圈。 显示效果： 用到的函数 cv2.bitwise_and cv2.bitwise_or cv2.bitwise_xor cv2.bitwise_not 更多的参考：PPaO Chapter 6 – Image Processing]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>Opencv</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenCV_python3_05]]></title>
    <url>%2F%2F2018%2FOpenCV_python3_05.html</url>
    <content type="text"><![CDATA[Practical Python and OpenCV,3rd Edition 05 图像算术(image arithmetic)我们都知道基本的算术运算，如加法和减法。但是在处理图像时，我们需要记住颜色空间和数据类型的限制。 例如，RGB图像具有落在[0,255]范围内的像素。那么如果我们正在检查强度为250的像素并尝试向它添加10，会发生什么？ 在正常的算术规则下，我们最终得到的值为260.但是，由于RGB图像表示为8位无符号整数，因此260不是有效值。 那么，会发生什么？我们是否应该执行某种检查以确保没有像素落在[0,255]范围之外，从而将所有像素剪切为最小值0和最大值255？ 或者我们应用模数运算，并“wrap around(环绕)”？在模数规则下，添加10到250将简单地回绕到值4。 哪种方式是处理超出[0,255]范围的图像添加和减法的“正确”方法？ 答案是没有正确的方法——它只取决于你如何操纵像素以及你想要的结果。 但是，请务必记住OpenCV和NumPy加法之间存在差异。NumPy将执行模运算和“warp around”。另一方面，OpenCV将执行裁剪并确保像素值永远不会超出范围[0,255] 请看代码： from __future__ import print_function import numpy as np import argparse import cv2 ap = argparse.ArgumentParser() ap.add_argument(&apos;-i&apos;,&quot;--image&quot;,required=True, help=&quot;path to the image&quot;) args = vars(ap.parse_args()) image = cv2.imread(args[&quot;image&quot;]) cv2.imshow(&quot;Original&quot;,image) print(&quot;max of 255: {}&quot;.format(cv2.add(np.uint8([200]),np.uint8([100])))) print(&quot;min of 0: {}&quot;.format(cv2.add(np.uint8([50]),np.uint8([100])))) print(&quot;wrap around: {}&quot;.format(np.uint8([200]) + np.uint8([100]))) print(&quot;wrap around: {}&quot;.format(np.uint8([50]) - np.uint8([100]))) 解释： 第一个print函数，我们定义了两个8位无符号整数的NumPy数组。第一个数组有一个元素：值为200.第二个数组也只有一个元素，但值为100.然后我们使用OpenCV的cv2.add方法将值一起添加。那么返回的值到底回事多少呢？那么，根据标准算术规则，我们认为结果应该是300，但是，请记住，我们正在使用8位无符号整数，其范围仅在[0,255]之间。由于我们使用的是cv2.add方法，OpenCV会为我们处理剪切，并确保添加产生的最大值为255.当我们执行此代码时，我们可以看到返回值是255。 第二个print函数，我们使用cv2.subtract执行减法。同样，我们定义了两个NumPy数组，每个数组都有一个元素，以及8位无符号整数数据类型。第一个数组的值为50，第二个数组的值为100。根据算术规则，返回值本该是-50，但是OpenCV再一次为我们进行裁剪，返回值会是0. max of 255: [[255]] min of 0: [[0]] 但是如果我们使用NumPy来执行算术而不是OpenCV会发生什么？ 第三个print函数，首先，我们定义两个NumPy数组，每个数组都有一个元素，以及8位无符号整数数据类型。 第一个数组的值为200，第二个数组的值为100.使用cv2.add函数，我们的添加将被剪切并返回值255。但是Numpy并不会执行裁剪。它会执行模运算并”warps around(环绕)”。一旦值达到255，Numpy将回绕到0并再一次向上技术，直到100 steps reached。 第四个print函数，在减法期间一旦达到0，模运算操作就会回绕并从255开始向后计数。 wrap around: [44] wrap around: [206] 现在我们已经在OpenCV和NumPy中探讨了图像算法的注意事项，让我们对实际图像执行算法并查看结果： M = np.ones(image.shape,dtype=&quot;uint8&quot;) * 100 added = cv2.add(image,M) cv2.imshow(&quot;Added&quot;,added) M = np.ones(image.shape,dtype=&quot;uint8&quot;) * 50 subtracted = cv2.subtract(image,M) cv2.imshow(&quot;Subtracted&quot;,subtracted) cv2.waitKey(0) 显示效果: 解释： 我们首先定义了一个NumPy数组，其大小与我们的图像相同 同样，我们肯定使用8位无符号整数作为我们的数据类型。为了用100的值而不是1来填充我们的矩阵，我们简单地将1的矩阵乘以100.最后，我们使用cv2.add函数将我们的100的矩阵添加到原始图像——从而增加每个像素强度 图像乘以100，但如果它们试图超过255，则确保所有值都被剪切到范围[0,255]。 同样的，我们再定义了一个NumPy数组，并将原始图像减去50个像素，最后，曾经是白色的像素现在看起来是灰色的。这是因为我们从像素中减去50并将它们推向RGB颜色空间的较暗区域。 用到的函数 cv2.add cv2.subtract 更多的参考：PPaO Chapter 6 – Image Processing]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>Opencv</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenCV_python3_04]]></title>
    <url>%2F%2F2018%2FOpenCV_python3_04.html</url>
    <content type="text"><![CDATA[Practical Python and OpenCV,3rd Edition 04 图像转换(image transformations)本节中，我们将介绍基本的图像转换。 这些是您可能应用于图像的常用技术，包括平移，旋转，调整大小，翻转和裁剪。 平移(Translation)我们首先介绍的是Translation。Trans Latino是沿x和y轴移动图像。 使用Translation，我们可以向上，向下，向左或向右移动图像，以及上述任意组合！请看下面的代码(translation.py)： import numpy as np import argparse import imutils import cv2 ap = argparse.ArgumentParser() ap.add_argument(&apos;-i&apos;,&quot;--image&quot;,required=True, help=&quot;path to the image&quot;) args = vars(ap.parse_args()) image = cv2.imread(args[&quot;image&quot;]) cv2.imshow(&quot;Original&quot;,image) M = np.float32([[1,0,25],[0,1,50]]) shifted = cv2.warpAffine(image,M,(image.shape[1],image.shape[0])) cv2.imshow(&quot;Shifted Down and Right&quot;,shifted) M = np.float32([[1,0,-50],[0,1,-90]]) shifted = cv2.warpAffine(image,M,(image.shape[1],image.shape[0])) cv2.imshow(&quot;Shifted Up and Left&quot;,shifted) 解释: 主要从M——我们的的translation matrix讲起，该矩阵告诉我们的图像要进行平移多少像素(从左到右，从上到下)。该矩阵被定义为float32类型的数组，因为OpenCV希望该矩阵是一个float类型。The first row of the matrix is [1,0,tx]，其中tx是the number of pixels we will shift the image left or right，而负值则表示图像将向左平移，正值表示图像将向右平移。然后我们定义the second row of the matrix as [0,1,ty]，其中，ty是the number of pixels we will shift the image up or down。其中，负值表示图像向上平移，正值表示图像向下平移。 使用了上面的那个标记，我们看代码中，将tx=25,ty=50则意味着，我们将图像向右平移25个像素，向下平移50个像素。 我们定义好了平移矩阵之后，图像的实际平移是使用了cv2.warpAffine函数来执行，该函数的第一个参数是我们要进行平移的图像，第二个参数是我们的平移矩阵M，最后我们需要手动地提供图像的尺寸(width and height)作为第三个参数。 前面实现了图像的平移，但是代码太过冗余，我们新建一个.py文件来实现平移功能(imutils.py) import numpy as np import cv2 def translate(image,x,y): M = np.float32([[1,0,x],[0,1,y]]) shifted = cv2.warpAffine(image,M,(image.shape[1],image.shape[0])) return shifted 解释: 我们的平移方法有三个参数：我们要平移的图像，我们沿x轴移动的像素数，以及我们将沿y轴移动的像素数。然后，此方法定义我们的平移矩阵M，然后再应用实际移位。最后，我们返回移位后的图像。 修改translation.py的内容 shifted = imutils.translate(image,0,100) cv2.imshow(&quot;Shifted Down&quot;,shifted) cv2.waitKey(0) 运行结果： 旋转(Rotation)在这里，我们将使用θ来表示要旋转多少度。 rotate.py import numpy as np import argparse import imutils import cv2 ap = argparse.ArgumentParser() ap.add_argument(&apos;-i&apos;,&quot;--image&quot;,required=True, help=&quot;Path to the image&quot;) args = vars(ap.parse_args()) image = cv2.imread(args[&quot;image&quot;]) cv2.imshow(&quot;Original&quot;,image) (h,w) = image.shape[:2] center = (w // 2, h // 2) M = cv2.getRotationMatrix2D(center,45,1.0) rotated = cv2.warpAffine(image,M,(w,h)) cv2.imshow(&quot;Rotated by 45 Degrees&quot;,rotated) M = cv2.getRotationMatrix2D(center,-90,1.0) rotated = cv2.warpAffine(image,M,(w,h)) cv2.imshow(&quot;Rotated by -90 Degrees&quot;,rotated) 解释: 前面还是导入必要的包以及解析输入参数和显示原始图像。 当我们旋转图像时，我们需要指定我们想要旋转的点。 在大多数情况下，您需要围绕图像的中心旋转; 我们首先获取图像的宽度和高度，因为OpenCV将图像读取为一个numpy数组，所以和矩阵类似，矩阵的行对应着高，也就是height=image.shape[0]，矩阵的列对应着图像的宽，也就是width=image.shape[1]，然后我们除以2，确定图像的中心位置。这里我们使用和C语言一样的除法，//表示整除法，以确保我们得到的是整数。 就像我们定义一个矩阵来平移图像一样，我们也定义了一个矩阵来旋转图像。 不是使用NumPy手动构造矩阵，而是调用cv2.getRotationMatrix2D方法。 cv2.getRotationMatrix2D函数有三个参数：第一个是我们想要旋转图像的点，在这里是图像的中心位置，然后我们指定需要旋转的角度θ，我们第一次是旋转了45度，最后一个参数图像的比例。我们还没有讨论调整图像的大小，但是在这里你可以指定浮点值，其中1.0表示使用相同的图像尺寸。 但是，如果指定值为2.0，则图像的大小将加倍。 类似地，值0.5将图像的大小减半。 一旦我们从cv2.getRotationMatrix2D函数获得旋转矩阵M，我们就可以使用cv2.warpAffine方法将旋转应用于我们的图像。此函数的第一个参数是我们想要旋转的图像。然后，我们指定旋转矩阵M以及图像的输出尺寸（宽度和高度）。然后，显示旋转了的图像。 显示效果为： 接下来为了让代码更加的pretty and Pythonic，我们在imutils.py中添加一个rotate方法 def rotate(image,angle,center=None,scale=1.0): (h,w) = image.shape[:2] if center is None: center = (w // 2 , h // 2) M = cv2.getRotationMatrix2D(center,angle,scale) rotated = cv2.warpAffine(image,M,(w,h)) return rotated 解释： 我们的rotate方法有四个参数。第一个是你的image。第二个是我们想要旋转图像的角度θ。我们提供两个可选的关键字参数，center和scale。center参数是我们希望旋转图像的点。如果提供了值None，则该方法自动选图像中心为旋转点。最后，scale参数用于处理在旋转期间是否应更改图像的大小。scale参数的默认值为1.0，这意味着不应调整大小。 再次修改rotate.py文件， rotated = imutils.rotate(image,180) cv2.imshow(&quot;Rotated by 180 Degrees&quot;,rotated) cv2.waitKey(0) 运行结果： 确实很pythonic！！！ Resizingimport numpy as np import argparse import imutils import cv2 ap = argparse.ArgumentParser() ap.add_argument(&apos;-i&apos;,&quot;--image&quot;,required=True,help=&quot;Path to the image&quot;) args = vars(ap.parse_args()) image = cv2.imread(args[&quot;image&quot;]) cv2.imshow(&quot;Original&quot;,image) 解释： 这个和前面一样，解析参数，读取图片并显示图片 r = 150.0 / image.shape[1] dim = (150,int(image.shape[0] * r)) resized = cv2.resize(image,dim,interpolation=cv2.INTER_AREA) cv2.imshow(&quot;Resized (Width)&quot;,resized) 解释： r表示the aspect ratio。这里image.shape[1]表示我们图片的宽度，上面的代码我们设置我们图片的新宽度为150个pixels，为了计算新高度与旧高度的比率，我们简单地将比率r定义为新宽度（150像素）除以旧宽度，接着为了保持宽高比，我们计算出高度(height)的变化为 height / width * 150。接下来调用resize函数，该函数的第一个参数是我们希望调整大小的图像，第二个参数是我们为新图像计算的尺寸。最后一个参数是我们的插值方法，这是在背后工作的算法 处理实际图像的大小调整方式。一般来说，我发现使用cv2.INTER_AREA在调整大小时获得最佳效果; 但是，其他适当的选择包括cv2.INTER_LINEAR，cv2.INTER_CUBIC和cv2.INTER_NEAREST。 r = 50.0 / image.shape[0] dim = (int(image.shape[1] * r),50) resized = cv2.resize(image,dim,interpolation=cv2.INTER_AREA) cv2.imshow(&quot;Resized (Height)&quot;,resized) cv2.waitKey(0) 解释： 这一段代码和前一段类似，只不过这一次是固定高度为50个像素，然后保持宽高比计算出宽度，显示图像。 resized = imutils.resize(image,width = 100) cv2.imshow(&quot;Resized via Function&quot;,resized) cv2.waitKey(0) 解释： 前面都是用了三行代码实现图像的resize，我们可以利用imutils.resize函数只需要一行即可实现一样的功能。 在imutils.py函数中实现： def resize(image,width=None,height=None,inter=cv2.INTER_AREA): dim = None (h,w) = image.shape[:2] if width is None and height is None: return image if width is None: r = height / float(h) dim = (int(w * r),height) else: r = width / float(w) dim = (width,int(h * r)) resized = cv2.resize(image,dim,interpolation=inter) return resized 解释： 第一个参数是我们想要调整大小的图像。然后，我们定义两个关键字参数，宽度和高度。这两个参数都不能为None，否则我们将不知道如何调整图像大小。我们还提供inter，这是我们的插值方法，默认为cv2.INTER_AREA。 显示效果： Flipping接下来我们要探索的图像转换是翻转图像。 我们可以围绕x或者翻转图像y轴，甚至两者。查看下图理解一下水平和垂直翻转的区别。 import argparse import cv2 ap = argparse.ArgumentParser() ap.add_argument(&apos;-i&apos;,&quot;--image&quot;,required=True, help=&quot;Path to the image&quot;) args = vars(ap.parse_args()) image = cv2.imread(args[&quot;image&quot;]) cv2.imshow(&quot;Original&quot;,image) 解释：和前面一样，解析参数，显示原始图片 flipped = cv2.flip(image,1) cv2.imshow(&quot;Flipped Horizontally&quot;,flipped) flipped = cv2.flip(image,0) cv2.imshow(&quot;Flipped Vertically&quot;,flipped) flipped = cv2.flip(image,-1) cv2.imshow(&quot;Flipped Horizontally &amp; Vertically&quot;,flipped) cv2.waitKey(0) 我们通过调用cv2.flip函数来完成图像的翻转。cv2.flip方法需要两个参数：我们要翻转的图像和a flip code，用于确定我们如何翻转图片。 使用翻转代码值1表示我们将围绕y轴水平翻转图像。指定翻转代码为0表示我们想要围绕x轴垂直翻转图像。最后，使用负翻转代码翻转两个轴图像。 显示效果： Cropping当我们裁剪图像时，我们想要删除我们不感兴趣的图像的外部部分。我们可以使用NumPy数组切片来完成图像裁剪。 import numpy as np import argparse import cv2 ap = argparse.ArgumentParser() ap.add_argument(&apos;-i&apos;,&quot;--image&quot;,required=True, help=&quot;Path to the image&quot;) args = vars(ap.parse_args()) image = cv2.imread(args[&quot;image&quot;]) cv2.imshow(&quot;Original&quot;,image) cropped = image[30:120,240:335] cv2.imshow(&quot;T-Rex Face&quot;,cropped) cv2.waitKey(0) 解释： 实际裁剪在一行代码上进行。我们提供NumPy数组切片以提取图像的矩形区域，从（240,30）开始到（335,120）结束。The order in which we supply theindexes to the crop may seem counterintuitive(有悖常理); 但请记住，OpenCV将图像表示为NumPy数组，其高度优先，宽度为次之。这意味着我们需要在x轴之前提供y轴值. 为了执行我们的裁剪，NumPy需要四个索引： 开始y：起始y坐标。在这种情况下，我们从y=30开始。 结束y：结束y坐标。我们将在y=120时结束我们的裁剪。 开始x：切片的起始x坐标。我们在x=240时开始裁剪 结束x：切片的结束x轴坐标。我们的切片在x=335处结束 显示效果: 用到的函数 cv2.warpAffine cv2.getRotationMatrix2D cv2.resize 更多的参考：chapter-5-drawing]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>Opencv</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenCV_python3_03]]></title>
    <url>%2F%2F2018%2FOpenCV_python3_03.html</url>
    <content type="text"><![CDATA[Practical Python and OpenCV,3rd Edition 03 代码import numpy as np import cv2 canvas = np.zeros((300,300,3),dtype=&quot;uint8&quot;) 解释: 前两个是导入python库，接着就构造一个Numpy数组，使用.zeros方法初始化一个300 rows 和 300 columns的矩阵(也就是说画布的大小为300x300=90000个像素大小)，同时还分配了3个channels，one for Red,Green,and Blue,respectively。同时需要注意的是数据类型，dtype。由于我们将图像表示为像素在[0,255]范围内的RGB图像，因此我们使用8位无符号整数或uint8。 green = (0,255,0) cv2.line(canvas,(0,0),(300,300),green) cv2.imshow(&quot;Canvas&quot;,canvas) cv2.waitKey(0) red = (0,0,255) cv2.line(canvas,(300,0),(0,300),red,3) cv2.imshow(&quot;Canvas&quot;,canvas) cv2.waitKey(0) 解释: 前面我们初始化了我们的画布，接下来我们开始画直线，首先我们定义了一个元组(tuple)来定义画笔的颜色,这里是绿色，然后我们调用.line方法，该方法的第一个参数是我们绘制的画布，第二个参数是该line的起点，我们设置开始点为(0,0)，我们还需要为该line提供一个结束点（第三个参数）。我们将结束点设置为（300,300)，最后一个参数是我们画笔的颜色，我们设置为绿色。接着将我们的图像显示出来，并且wait for a keypress. 第二段代码的.line方法的最后一个参数3就是我们画笔的thickness了，也就是画笔的厚度了。 显示效果为： cv2.rectangle(canvas,(10,10),(60,60),green) cv2.imshow(&quot;Canvas&quot;,canvas) cv2.waitKey(0) cv2.rectangle(canvas,(50,200),(200,225),red,5) cv2.imshow(&quot;Canvas&quot;,canvas) cv2.waitKey(0) blue = (255,0,0) cv2.rectangle(canvas,(200,50),(225,125),blue,-1) cv2.imshow(&quot;Canvas&quot;,canvas) cv2.waitKey(0) 解释: 第一段代码我们使用了.rectangle方法，该方法的第一个参数是我们要画的画布，第二个参数是我们的rectangle的starting(x,y)位置，这里我们设置我们rectangle的开始point为(10,10)，然后我们还得设置我们矩形的结束点为(60,60),这个时候我们定义了一个(60-10,60-10)=(50,50)大小的像素区域。最后一个就是我们矩形的颜色了。第二段代码的第一行的最后一个参数是画笔的厚度，第三段代码的最后一个参数表示绘制一个solid(实心)的矩形。 显示效果为： canvas = np.zeros((300,300,3),dtype=&quot;uint8&quot;) (centerX,centerY) = (canvas.shape[1] // 2 , canvas.shape[0] // 2) white = (255,255,255) for r in range(0,175,25): cv2.circle(canvas,(centerX,centerY),r,white) cv2.imshow(&quot;Canvas&quot;,canvas) cv2.waitKey(0) 解释: 我们首先初始化我们的画布，然后我们计算两个变量：centerX和centerY。这两个变量代表图像中心的(x,y)的坐标。我们首先获取图像的宽度(也就是列)，通过.shape[1]获取，然后获取图像的高度(也就是行)，通过.shape[0]获取，最后用//(取C语言的除法，不保留小数)除以2获取中心位置。获取了圆心的位置，接下来，用一个for循环，starting from 0 and ending at 150，每一次增加25的半径来画圆。.circle方法的第一个参数是我们的画布，然后我们将圆心坐标传给第二个参数，第三个参数是我们的半径大小r，最后一个是我们的圆的颜色。 显示效果为： for i in range(0,25): radius = np.random.randint(5, high = 200) color = np.random.randint(0, high = 256 , size = (3,)).tolist() pt = np.random.randint(0, high = 300, size=(2,)) cv2.circle(canvas,tuple(pt),radius,color,-1) cv2.imshow(&quot;Canvas&quot;,canvas) cv2.waitKey(0) 解释: 接下来我们画25个圆，用一个for循环来实现。首先是半径，我们使用Numpy的.random.randint方法生成[5,200)范围内的半径值，接着用该方法生成RGB颜色，范围是[0,255],为了得到三个随机的整数，而不是一个整数，我们传递关键字参数size=(3,),数字3表示有3个数据，这样我们就获取了由3个值为[0,255]的随机数组成的元组来表示我们的RGB颜色了。接着哦我们需要一个圆心的point，我们也设置pt为[0,300)的值，但是圆心只需要两个数字，即(x,y)即可，因此，size=(2,)。最后我们调用.circle方法来画我们的圆。 显示效果为： 运行程序 点击图片部分，按键盘任意键结束脚本。 完整的代码 import numpy as np import cv2 canvas = np.zeros((300,300,3),dtype=&quot;uint8&quot;) green = (0,255,0) cv2.line(canvas,(0,0),(300,300),green) cv2.imshow(&quot;Canvas&quot;,canvas) cv2.waitKey(0) red = (0,0,255) cv2.line(canvas,(300,0),(0,300),red,3) cv2.imshow(&quot;Canvas&quot;,canvas) cv2.waitKey(0) cv2.rectangle(canvas,(10,10),(60,60),green) cv2.imshow(&quot;Canvas&quot;,canvas) cv2.waitKey(0) cv2.rectangle(canvas,(50,200),(200,225),red,5) cv2.imshow(&quot;Canvas&quot;,canvas) cv2.waitKey(0) blue = (255,0,0) cv2.rectangle(canvas,(200,50),(225,125),blue,-1) cv2.imshow(&quot;Canvas&quot;,canvas) cv2.waitKey(0) canvas = np.zeros((300,300,3),dtype=&quot;uint8&quot;) (centerX,centerY) = (canvas.shape[1] // 2 , canvas.shape[0] // 2) white = (255,255,255) for r in range(0,175,25): cv2.circle(canvas,(centerX,centerY),r,white) cv2.imshow(&quot;Canvas&quot;,canvas) cv2.waitKey(0) for i in range(0,25): radius = np.random.randint(5, high = 200) color = np.random.randint(0, high = 256 , size = (3,)).tolist() pt = np.random.randint(0, high = 300, size=(2,)) cv2.circle(canvas,tuple(pt),radius,color,-1) cv2.imshow(&quot;Canvas&quot;,canvas) cv2.waitKey(0) 用到的函数 cv2.line cv2.rectangle cv2.circle 更多的参考：chapter-5-drawing 名词： Regions of Interest(ROIs) machine-readable zones(MRZs) 小测试：请实现下图效果，尽可能用少的代码。 答案下载地址]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>Oepncv</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenCV_python3_02]]></title>
    <url>%2F%2F2018%2FOpenCV_python3_02.html</url>
    <content type="text"><![CDATA[Practical Python and OpenCV,3rd Edition 02 基础说明什么是像素每个图像都由一组像素组成。 像素是图像的原始构建块。没有比像素更小的单位了。 通常，我们将像素视为出现在图像中给定位置的光的“颜色”或“强度”。 如果我们将图像视为网格，则网格中的每个方块都包含一个像素。 例如，假设我们有一个分辨率为500×300的图像。这意味着我们的图像表示为像素网格，有500行和300列。总体而言，我们的图像总共有 500×300 = 150,000像素。 大多数像素以两种方式表示：灰度(grayscale)和彩色(color)。在灰度图像中，每个像素具有0到255之间的值，其中0对应于“黑色”而255对应于“白色”。 0到255之间的值是不同的灰色阴影，其中，接近0的更加的darker，接近于255更加的lighter。 彩色通常以RGB颜色空间表示，one value for the Red component,one for Green,and one for Blue。 RGB中的每一种都由0到255范围内的整数表示，这表示颜色的“多少”。像素值只需要在[0,255]范围内，我们通常使用8位无符号整数来表示每种颜色强度。 然后，我们将这些值组合成图形中的RGB(红色，绿色，蓝色）元组(tuple)。 这个元组就代表我们的颜色。 为了构建一个白色，我们将完全填充每个红色，绿色和蓝色 buckets，如下所示:(255,255,255）。为了创建一个黑色，我们将每个bucket都清空：(0,0,0) ，为了创造一种纯红色，我们将完全填满红色的bucket：(255,0,0）。 coordinate system(坐标系统)如上所述，图像表示为像素网格。 想象一下我们的网格作为一张方格纸。 使用该方格纸，点(0,0）对应于图像的左上角。 当我们向下和向右移动时，x和y值都会增加。(Python语言是零索引的，这意味着我们总是从零开始计数。)，看下图： 字母“I”放在一张图纸上.像素是通过他们的(x，y）坐标访问的，我们向右走x列，向下走y行(因为x是横坐标，y是纵坐标)，记住Python是零索引的：我们从零而不是一开始计数。 代码from __future__ import print_function import argparse import cv2 ap = argparse.ArgumentParser() ap.add_argument(&apos;-i&apos;,&quot;--image&quot;,required=True, help=&quot;Path to the image&quot;) args = vars(ap.parse_args()) image = cv2.imread(args[&quot;image&quot;]) cv2.imshow(&quot;Original&quot;,image) 请记住，OpenCV将图像表示为NumPy数组。概念上，我们可以将此表示视为一个矩阵。为了访问像素值，我们只需要提供我们感兴趣的像素的x和y坐标。但是，重要的是要注意OpenCV以相反的顺序存储RGB channels。 虽然我们通常用Red，Green和Blue(RGB)来思考，但OpenCV实际上按Blue，Green和Red的顺序存储它们(BGR)。如下面的代码： (b,g,r) = image[0,0] print(&quot;Pixel at (0,0) - Red:{}, Green： {}， Blue: {}&quot;.format( r,g,b)) image[0,0] = (0,0,255) (b,g,r) = image[0,0] print(&quot;Pixel at (0,0) - Red: {} , Green: {}, Blue: {}&quot;.format(r, g,b)) 解释： 我们首先抓取图像的左上角的像素，即(0,0)的位置。 这个像素表示为元组.同时，OpenCV以相反的顺序存储RGB像素，因此当我们解包并访问元组中的每个元素时，我们实际上是以BGR顺序查看它们。然后我们将像素RGB颜色打印出来。 接下来，我们操纵图像中的左上角像素，该像素位于坐标（0,0）处，并将其设置为(0,0,255)。 如果我们以RGB格式读取这个像素值，我们的红色值为0，绿色值为0，蓝色值为255，因此使其成为纯蓝色。但是，正如我上面提到的，在使用OpenCV时我们需要特别注意。 我们的像素实际上以BGR格式存储，而不是RGB格式。我们实际上将这个像素读为255为红色，0为绿色，0为蓝色，使其成为红色，而不是蓝色。 corner = image[0:100,0:100] cv2.imshow(&quot;Corner&quot;,corner) image[0:100,0:100] = (0,255,0) cv2.imshow(&quot;Updated&quot;,image) cv2.waitKey(0) 解释： 接下来我们使用NumPy的数组切片功能来访问图像的较大矩形部分。为了访问图像较大的部分，Numpy希望我们提供四个索引值，分别是Start y,End y,Start x以及End x。 最后，运行程序即可。 效果图： 点击图片部分，按键盘任意键结束脚本。 完整的代码 from __future__ import print_function import argparse import cv2 ap = argparse.ArgumentParser() ap.add_argument(&apos;-i&apos;,&quot;--image&quot;,required=True, help=&quot;Path to the image&quot;) args = vars(ap.parse_args()) image = cv2.imread(args[&quot;image&quot;]) cv2.imshow(&quot;Original&quot;,image) (b,g,r) = image[0,0] print(&quot;Pixel at (0,0) - Red:{}, Green： {}， Blue: {}&quot;.format( r,g,b)) image[0,0] = (0,0,255) (b,g,r) = image[0,0] print(&quot;Pixel at (0,0) - Red: {} , Green: {}, Blue: {}&quot;.format(r, g,b)) corner = image[0:100,0:100] cv2.imshow(&quot;Corner&quot;,corner) image[0:100,0:100] = (0,255,0) cv2.imshow(&quot;Updated&quot;,image) cv2.waitKey(0) 用到的函数 imread imshow waitKey 更多的参考：chapter-4-image-basics why-does-opencv-use-bgr-color-format 总结起来就是： 有一些技术原因，但总的来说，为什么开发人员选择BGR格式的原因是因为在BGR中指定颜色值而不是RGB在当时更受欢迎 - 这就是全部。]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>Oepncv</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenCV_python3_01]]></title>
    <url>%2F%2F2018%2FOpenCV_python3_01.html</url>
    <content type="text"><![CDATA[Practical Python and OpenCV,3rd Edition 01 load、display、savefrom __future__ import print_function import argparse import cv2 解释： 从future package中导入print_function，是因为我们将使用实际的print() function，而不是print statement，这样我们的代码就可以在python2.7以及python3中共同运行。 ap = argparse.ArgumentParser() ap.add_argument(&apos;-i&apos;,&quot;--image&quot;,required=True, help=&quot;Path to the image&quot;) args = vars(ap.parse_args()) 解释： 使用“–image”参数，也就是我们图像在磁盘的路径，我们将这个路径进行parse，然后将他们存储在一个字典中。 image = cv2.imread(args[&quot;image&quot;]) print(&quot;height: {} pixels&quot;.format(image.shape[0])) print(&quot;width : {} pixels&quot;.format(image.shape[1])) print(&quot;channels : {}&quot;.format(image.shape[2])) cv2.imshow(&quot;Image&quot;,image) cv2.waitKey(0) 解释： cv2.imread函数将返回一个Numpy数据，代表着图像。对于Numpy数组，我们可以使用shape属性来获取图像的width、height以及channels的数量。imshow函数将我们的图像显示在Windows窗口中，它的第一个参数是”name” of our window.第二个参数是我们从磁盘加载的图像了。而waitKey函数会暂停我们的脚本程序，直到我们在键盘上按下一个key之后才继续执行，而参数0则表示我们按键盘上的任意键都可以继续执行脚本程序。 cv2.imwrite(&quot;newimage.jpg&quot;,image) 解释： 最后我们使用imwrite函数将我们的保存为jpg格式的图像，第一个参数是我们要保存的图像的路径名，第二个是我们希望保存的图像。 最后执行脚本程序： 显示效果图片 停止脚本程序很简单，就如前面所说的，在显示的图片的任意地方按键盘上的任意键即可。然后查看脚本目录，你可以看到一个newimage.jpg的图片 完整的代码 from __future__ import print_function import argparse import cv2 ap = argparse.ArgumentParser() ap.add_argument(&apos;-i&apos;,&quot;--image&quot;,required=True, help=&quot;Path to the image&quot;) args = vars(ap.parse_args()) image = cv2.imread(args[&quot;image&quot;]) print(&quot;height: {} pixels&quot;.format(image.shape[0])) print(&quot;width : {} pixels&quot;.format(image.shape[1])) print(&quot;channels : {}&quot;.format(image.shape[2])) cv2.imshow(&quot;Image&quot;,image) cv2.waitKey(0) cv2.imwrite(&quot;newimage.jpg&quot;,image) 用到的函数 imread imshow waitKey imwrite danger no-icon 在上面的代码中，height对应于shape[0]，width对应于shape[1]。也就是Numpy 的shape似乎和自己想的不一样(specifying the height before the width)。但是，就matrix definition而言，这实际上是有意义。因为当我们定义矩阵的时候，我们通常将它们写成(# of rows x # of columns)的形式。这里，我们的图片有height：400 pixels(the number of rows) 以及 width：400 pixels(the number of columns). 更多的参考：loading-displaying-and-saving How-To: OpenCV Load an Image Python Command Line Arguments How to Display a Matplotlib RGB Image Resolved: Matplotlib figures not showing up or displaying]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git学习之路_2_文件管理]]></title>
    <url>%2F%2F2018%2Fgit_2.html</url>
    <content type="text"><![CDATA[时光穿梭前面我们已经添加并提交了一个readme.txt文件，现在我们将文件进行修改，改为下面的内容： 现在，我们运行命令git status看一看会有什么结果： git status命令可以让我们时刻掌握仓库当前的状态，从上图中可以看出来，redme.txt文件显然被修改过了，但是我们并没有准备提交我们的修改。如果我们不知道修改了什么样的内容，我们可以运行命令git diff来查看具体修改了什么样的内容。 diff是英文difference的缩写，上图中显示的格式是Unix通用的diff格式，知道了我们对readme.txt文件做了那些修改，接下来我们把文件提交到仓库中，一样是两个步骤，第一步运行命令git add git add readme.txt 接下来在执行git commit命令之前，我们用命令git status看看当前仓库的状态 上面的git status命令告诉我们，将要被提交的修改包括readme.txt，接下来，我们可以放心的提交了： 进行了提交之后，我们再用git status命令来查看仓库的当前状态 Git告诉我们当前没有需要提交的修改，而且，工作目录是干净的(working tree clean) 本节命令 git status：掌握工作区的状态 ‘git diff：查看修改的内容 参考来源Git 时光穿梭 Git cheat sheet英文版 Git cheat sheet中文版]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git学习之路_1_安装git以及创建版本库]]></title>
    <url>%2F%2F2018%2Fgit_1.html</url>
    <content type="text"><![CDATA[windows上安装Git下载git for windows，新手默认安装即可。 官方网址为：https://gitforwindows.org/ 安装完成之后，下一步就应该告诉git你来自哪里。因为Git是分布式版本控制系统，所以每个机器必须自报家门，即告诉git，你的名字和Email地址，命令为： git config --global user.name &quot;your name&quot; git config --global user.email &quot;your email&quot; 注意：(引号内请输入你自己设置的名字和自己的邮箱),此用户名和邮箱是git提交代码时用来显示你的身份和联系方式的，并不是github用户名和邮箱。其中--global参数表示你这台及其上所有的git仓库都会使用这个配置。 创建版本库首先这里再明确一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。 在Windows系统上，为了避免各种莫名其妙的问题，请确保目录名(不管是子目录还是父目录)不要包含中文。 之后使用命令git init来将这个目录变成Git可以管理的仓库。 Git仓库建好了，还是一个空的仓库，同时在该目录下会有一个隐藏的.git目录，这个目录是用来跟踪管理版本库的，没事千万别修改哦！ 把文件添加到版本库中 首先是文本编辑器的编码问题，强烈推荐使用UTF-8编码，而在Windows上不用使用Windows自带的记事本，可以选择notepad++，将默认编码改为：UTF-8 without BOM即可 让我们来新建一个readme.txt文件，输入下面的内容， 注意：这个文件一定要放在init的目录(或者子目录也行)下(否则git不能管理)，接着，把这个文件放到git仓库中只需要两步即可。 用git add告诉Git，把该文件添加到仓库中 git add readme.txt 用git commit告诉Git，把文件提交到仓库中 git commit -m “wrote a readme file” 上述命令的-m表示本次提交的说明(comment),可以输入任何内容，有意义最好，这样你就可以从历史记录里面方便地找到改动的记录。 在执行完git commit命令之后，就会告诉你，1 file changed:1个文件被改动(我们添加了readme.txt)；2 insertions：插入了两行内容(readme.txt有两行内容) 小贴士 为什么Git添加问价需要先add，再commit呢？因为commit命令可以一次提交很多文件(将add进去的文件都提交上去)，所以你可以多次add不同的文件。 比如： git add file1.txt file2.txt git commit -m &quot;add 2 files&quot; 参考来源Git 简介 Git cheat sheet英文版 Git cheat sheet中文版]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown语法学习]]></title>
    <url>%2F%2F2018%2FMarkdown%20grammar.html</url>
    <content type="text"><![CDATA[欢迎使用MarkdownPad编辑阅读器 粗体和斜体使用 一对* 或者 _ 表示包围的字体斜体显示而一对** 或者__ 来表示粗体。 例如： *你好，世界* **你好，世界** 显示效果为： 你好，世界 你好，世界 分级标题Markdown 的标题有Setext和Atx两种语法形式，在Setex中，在文本下面标注=表示最高级标题，在下面标注-表示第二级标题，比如下面的Setext形式输出一级标题和二级标题 Headline 1 ========== Headline 2 -- 当然也可以使用Atx形式输出各级标题 #Headline 1 ##Headline 2 段落Markdown中使用空白行来分割段落，比如下面两端文本，只需要在两端之间加上一行空行，Markdown就会为文本分段 Hello world 我是空白行 你好啊世界 显示效果为： Hello world 你好啊世界 字体Markdown支持HTML嵌套，我们可以利用HTML标记实现更改颜色的需求，更改颜色代码如下： Default Color &lt;font color=&apos;red&apos;&gt;Red Color&lt;/font&gt; &lt;font color=&apos;blue&apos;&gt;Blue Color&lt;/font&gt; &lt;font color=&apos;green&apos;&gt;Green Color&lt;/font&gt; &lt;font color=&apos;yellow&apos;&gt;Yellow Color&lt;/font&gt; &lt;font color=&apos;pink&apos;&gt;Pink Color&lt;/font&gt; &lt;font color=&apos;purple&apos;&gt;Purple Color&lt;/font&gt; &lt;font color=&apos;orange&apos;&gt;Orange Color&lt;/font&gt; 显示效果为： Red Color Blue Color Green Color Yellow Color Pink Color Purple Color Orange Color 更改字号、字体也可以使用HTML轻松实现 &lt;font size=&apos;-2&apos;&gt;Small Size&lt;/font&gt; Normal Size &lt;font size=&apos;+2&apos;&gt;Big Size&lt;/font&gt; &lt;font size=&apos;+2&apos; face=&apos;楷体&apos;&gt;楷体&lt;/font&gt; 输出显示为： Small Size Normal Size Big Size 楷体 引用Markdown使用email的区块引用方式，即右尖括号&gt;后面跟引用的内容，如下 &gt;Hello World &gt;你好，世界 其输出为： Hello World 你好，世界 列表Markdown中使用型号* , 加号+ 以及减号- 来表示无序列表(中间有空格) * 我是列表 + 我也是列表 - 我还是列表 其输出为： 我是列表 我也是列表 我还是列表 有序列表使用一个数字加一个英文句点作为项目标记，比如 1. 我是列表 2. 我也是列表 其输出如下： 我是列表 我也是列表 同时，列表也是可以进行嵌套使用的(中间不用空格)，比如： 1.你好，世界 &gt;你好，世界 2.Hello World &gt;Hello World 输出结果为： 1.你好，世界 你好，世界 2.Hello World Hello World 链接Markdown支持行内和参考两种形式的链接语法，两种都是使用中括号来把文字转成链接，行内形式是中括号包围文字，后面紧跟圆括号包围的链接，其代码如下所示： [我的博客](https://0leo0.github.io/) 其输出为： 我的博客 当然，我们也可以给我们的链接加上一个title属性， [我的博客](https://0leo0.github.io/ &quot;我是一个标题&quot;) 输出如下： 我的博客 参考形式的链接可以在原文中为链接定义一个名称，然后在文章的其他地方定义该链接的内容，其语法格式为 [链接文本][链接名称] 我想搜索关于Python的内容，可以去[Google][1],以及[Yahoo][2]和[Baidu][3] 然后在别的地方定义链接内容，语法格式为[链接名称]:空白符 URL &quot;title&quot; [1]: https://google.com/ &quot;Google&quot; [2]: https://yahoo.com/ &quot;Yahoo&quot; [3]: https://baidu.com/ &quot;Baidu&quot; 显示效果为： 我想搜索关于Python的内容，可以去Google,以及Yahoo和Baidu 另外，使用&lt;&gt; 包括的URL或者邮箱地址会被自动转换为超链接 &lt;https://0leo0.github.io/&gt; &lt;wen_9407@yahoo.com&gt; 效果如下： https://0leo0.github.io/ &#x77;&#101;&#110;&#95;&#x39;&#x34;&#48;&#x37;&#64;&#x79;&#97;&#104;&#x6f;&#111;&#x2e;&#x63;&#111;&#109; 图片图片的语法格式和链接类似，也分为行内形式和参考形式。 行内形式语法格式为：![alt text](URL title),其中alt,text以及text都可以选择性的加入，但URL必须有 ![我要显示图片](https://imgchr.com/i/iy5Th9) 显示的效果如下： 参考形式分为两部分，声明图片链接名称和定义图片链接 其中声明图片链接语法格式为：![alt text][id] 定义图片链接内容的语法格式为： [id]:URL &quot;title&quot;. 代码在一般段落文字中，可以使用反引号`来标记代码区段。 我喜欢这个世界`&lt;blank&gt;`，哈哈 显示效果 我喜欢这个世界&lt;blank&gt;，哈哈 在Markdown中，如果行开头有4个空格，将被视为代码。但是这种方式，不推荐，我们推荐的方式是代码块的首行用3个反引号`和编程语言名称(C、Python等)标记代码块开始，代码块的结尾用3个反引号来闭合代码块。 比如，将一段python代码插入到Markdown，首行用3个反引号来标记代码块，最后一行再用3个反引号来闭合代码块。 12345678import argparseparser = argparse.ArgumentParser(description="calculate X to the power of Y")parser.add_argument('square',type=int,\ help="display a square of a given number")parser.add_argument('-v',"--verbosity",type=int,choices=[0,1,2],\ default=1,help="increase output verbosity")args = parser.parse_args()answer = args.square ** 2 那么其显示效果为： 1234567891011121314import argparseparser = argparse.ArgumentParser(description="calculate X to the power of Y")parser.add_argument('square',type=int,\ help="display a square of a given number")parser.add_argument('-v',"--verbosity",type=int,choices=[0,1,2],\ default=1,help="increase output verbosity")args = parser.parse_args()answer = args.square ** 2 其他考虑HTML和CSS(使用列表的话，下面的会显示出作用，而不是以代码的形式显示出来) 1.分割线和空行 /*分割线*/ &lt;hr /&gt; /*空行*/ &lt;br /&gt; 2.引用 &lt;blockquote&gt;引用内容&lt;/blockquote&gt; /*如果上下间距很小，可以加个P*/ &lt;p&gt;&lt;blockquote&gt;引用内容&lt;/blockquote&gt;&lt;/p&gt; 3.居中与右对齐 /*居中*/ &lt;center&gt;内容&lt;/center&gt; /*右对齐*/ &lt;p style=&quot;text-align:right&quot;&gt;内容&lt;/p&gt; 4.字体大小和颜色 &lt;font colr=&quot;#xxxxxx&quot; size=&quot;numbr&quot;&gt;内容&lt;/font&gt; //详细请查看W3schcool：https://www.w3school.com.cn/tags/tag_font.asp 5.Todo list &lt;ul&gt; &lt;li&gt;&lt;i class=&quot;fa fa-check-square&quot;&gt;&lt;/i&gt;已完成&lt;/li&gt; &lt;li&gt;&lt;i class=&quot;fa fasquare&quot;&gt;&lt;/i&gt;未完成&lt;/li&gt; &lt;/ul&gt; Markdown 高阶语法内容目录在段落中填写[TOC]以显示全文内容的目录结构 [TOC] 标签分类在编辑区任意行的的列首位置输入以下代码给文稿标签： 标签: 数学 英语 Markdown 或者 Tags: 数学 英语 Markdown 删除线使用~~ 表示删除线。 ~~ 这是一段错误的文本 ~~ 脚注使用[^keyword]表示脚注 这是一个脚注1的样例 LaTex公式$表示行内公式 质能守恒方程 $E=mc2 这里的上标我使用sup / sup，用四个尖括号括起来，同样下标为sub 而$$表示整行公式，具体参考MathJax 参考网址：Cmd Markdown简明语法手册 Markdown入门基础 fontawesome reuixiy 后话 第一篇markdown写的文章弄的我好辛苦，主要是用markdownpad编辑好的和hexo解析出的html不一样，在网页上看到的不是自己想要的，后面希望会好一点吧！！]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
